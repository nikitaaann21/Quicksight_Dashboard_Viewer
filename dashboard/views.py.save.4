import boto3
from django.shortcuts import render, redirect
from django.conf import settings
import random
import string
from datetime import datetime
def login_view(request):
    if request.method == 'POST':
        # Process the login form
        username = request.POST.get('username')
        if user_exists(username):
            # Use the existing IAM user
            return use_existing_user(request, username)
        else:        
        # Generate a random password for the IAM user
           password = generate_password()

        # Create IAM client
          iam_client = boto3.client('iam', region_name='ap-southeast-2')

           try:
            # Create the IAM user
                response = iam_client.create_user(UserName=username)

            # Set the autogenerated password for the IAM user
                iam_client.create_login_profile(UserName=username, Password=password, PasswordResetRequired=True)
            # Add the user to an existing user group
                group_name = 'qsdashboard'
                iam_client.add_user_to_group(UserName=username, GroupName=group_name)
            # Retrieve the IAM user ARN
                user_arn = response['User']['Arn']

            # Assume an IAM role or obtain IAM user credentials to get temporary credenti
               sts_client = boto3.client('sts', region_name='ap-southeast-2')
               assumed_role = sts_client.assume_role(RoleArn='arn:aws:iam::233425133219:role/nikita_qsurl',RoleSessionName='MySession')
               temporary_credentials = assumed_role['Credentials']

            # Save the user ARN and temporary credentials to the session
               request.session['user_arn'] = user_arn
               request.session['temporary_credentials'] = temporary_credentials
            
            # Generate embed URL for the registered user
               embed_url = generateEmbedUrlForRegisteredUser()
               return render(request, 'dashboard.html', {'embed_url': embed_url})       
           except iam_client.exceptions.EntityAlreadyExistsException:
            # Handle the case where the IAM user already exists
               return render(request, 'login.html', {'error': f"The IAM user '{username}' already exists."})
    else:
            return render(request, 'login.html')

def generate_password():
    # Generate a random password that meets the specified requirements
    password_length = random.randint(8, 128)
    characters = string.ascii_letters + string.digits + '!@#$%^&*()_+-=[]{}|'
    password = ''

    while not validate_password(password):
        password = ''.join(random.choice(characters) for _ in range(password_length))

    return password

def validate_password(password):
    # Validate the password against the specified requirements
    if len(password) < 8 or len(password) > 128:
        return False

    character_types = 0
    if any(c.islower() for c in password):
        character_types += 1
    if any(c.isupper() for c in password):
        character_types += 1
    if any(c.isdigit() for c in password):
        character_types += 1
    if any(c in '!@#$%^&*()_+-=[]{}|' for c in password):
        character_types += 1

    if character_types < 3:
        return False

    return True

def dashboard_view(request):
    embed_url = generateEmbedUrlForRegisteredUser()

    return render(request, 'dashboard.html', {'embed_url': embed_url})

def generateEmbedUrlForRegisteredUser():
    # Assume an IAM role or obtain IAM user credentials to get temporary credentials  
    sts_client = boto3.client('sts', region_name='ap-southeast-2')
    assumed_role = sts_client.assume_role(RoleArn='arn:aws:iam::233425133219:role/nikita_qsurl',RoleSessionName='MySession')
    temporary_credentials = assumed_role['Credentials']

    # Create a QuickSight client with the temporary credentials
    quicksight_client = boto3.client(
    'quicksight',
    region_name='ap-southeast-2',
    aws_access_key_id=temporary_credentials['AccessKeyId'],
    aws_secret_access_key=temporary_credentials['SecretAccessKey'],
    aws_session_token=temporary_credentials['SessionToken']
)

                                         # Generate the embed URL using the QuickSight API
    response = quicksight_client.get_dashboard_embed_url(
        AwsAccountId=settings.AWS_ACCOUNT_ID,
        DashboardId=settings.QUICKSIGHT_DASHBOARD_ID,
        IdentityType='IAM',
        SessionLifetimeInMinutes=settings.QUICKSIGHT_SESSION_LIFETIME
    )
    embed_url = response['EmbedUrl']

    return embed_url
